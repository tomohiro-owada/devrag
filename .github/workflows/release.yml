name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_name: markdown-vector-mcp-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_name: markdown-vector-mcp-darwin-arm64
          # Linux builds
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: markdown-vector-mcp-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_name: markdown-vector-mcp-linux-arm64
          # Windows builds
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_name: markdown-vector-mcp-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          if [ "${{ matrix.goarch }}" = "arm64" ] && [ "${{ matrix.goos }}" = "linux" ]; then
            export CC=aarch64-linux-gnu-gcc
          fi
          go build -ldflags="-s -w" -o ${{ matrix.binary_name }} cmd/main.go
        shell: bash

      - name: Create tarball (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          tar -czf ${{ matrix.binary_name }}.tar.gz ${{ matrix.binary_name }}
          shasum -a 256 ${{ matrix.binary_name }}.tar.gz > ${{ matrix.binary_name }}.tar.gz.sha256

      - name: Create zip (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          7z a ${{ matrix.binary_name }}.zip ${{ matrix.binary_name }}
          certutil -hashfile ${{ matrix.binary_name }}.zip SHA256 > ${{ matrix.binary_name }}.zip.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: |
            ${{ matrix.binary_name }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
